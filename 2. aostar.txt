def recAOStar(n):
    global optimal_child_group
    print("Expanding Node:", n)
    and_nodes = allNodes.get(n, {}).get('AND', [])
    or_nodes = allNodes.get(n, {}).get('OR', [])

    if not and_nodes and not or_nodes:
        return heuristic(n)

    marked = set()
    solvable = False

    while not solvable:
        if len(marked) == len(and_nodes) + len(or_nodes):
            min_cost, min_cost_group = least_cost_group(and_nodes, or_nodes, set())
            solvable = True
            change_heuristic(n, min_cost)
            optimal_child_group[n] = min_cost_group
            continue

        min_cost, min_cost_group = least_cost_group(and_nodes, or_nodes, marked)
        is_expanded = any(recAOStar(node) for node in min_cost_group) if len(min_cost_group) > 1 else recAOStar(min_cost_group)

        if is_expanded:
            min_cost_verify, min_cost_group_verify = least_cost_group(and_nodes, or_nodes, set())
            if min_cost_group == min_cost_group_verify:
                solvable = True
                change_heuristic(n, min_cost_verify)
                optimal_child_group[n] = min_cost_group
        else:
            solvable = True
            change_heuristic(n, min_cost)
            optimal_child_group[n] = min_cost_group
        marked.update(min_cost_group)

    return heuristic(n)

def least_cost_group(and_nodes, or_nodes, marked):
    node_wise_cost = {
        node_pair[0] + node_pair[1]: heuristic(node_pair[0]) + heuristic(node_pair[1]) + 2
        for node_pair in and_nodes if node_pair[0] + node_pair[1] not in marked
    }

    node_wise_cost.update({
        node: heuristic(node) + 1
        for node in or_nodes if node not in marked
    })

    min_cost_group = min(node_wise_cost, key=node_wise_cost.get)
    return node_wise_cost[min_cost_group], min_cost_group

def heuristic(n):
    return H_dist[n]

def change_heuristic(n, cost):
    H_dist[n] = cost
    return

def print_path(node):
    print(optimal_child_group[node], "->", end="")
    print_path(optimal_child_group[node][0]) if len(optimal_child_group[node]) > 1 else None

H_dist = {'A': -1, 'B': 6, 'C': 3, 'D': 4, 'E': 5, 'F': 7, 'G': 2, 'H': 1, 'I': 0, 'J': 0}
allNodes = {'A': {'AND': [('C', 'D')], 'OR': ['B']}, 'B': {'OR': ['E', 'F']},
             'C': {'OR': ['G'], 'AND': [('H', 'I')]}, 'D': {'OR': ['J']}}
optimal_child_group = {}

optimal_cost = recAOStar('A')
print('Nodes which give optimal cost are:')
print_path('A')
print('\nOptimal Cost is:', optimal_cost)
